#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Business
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="University")]
	public partial class UniversityDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertC_completed(C_completed instance);
    partial void UpdateC_completed(C_completed instance);
    partial void DeleteC_completed(C_completed instance);
    partial void InsertC_taken(C_taken instance);
    partial void UpdateC_taken(C_taken instance);
    partial void DeleteC_taken(C_taken instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertInstructor(Instructor instance);
    partial void UpdateInstructor(Instructor instance);
    partial void DeleteInstructor(Instructor instance);
    partial void InsertP_req(P_req instance);
    partial void UpdateP_req(P_req instance);
    partial void DeleteP_req(P_req instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public UniversityDataDataContext() : 
				base(global::Business.Properties.Settings.Default.UniversityConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UniversityDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UniversityDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UniversityDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UniversityDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<C_completed> C_completeds
		{
			get
			{
				return this.GetTable<C_completed>();
			}
		}
		
		public System.Data.Linq.Table<C_taken> C_takens
		{
			get
			{
				return this.GetTable<C_taken>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Instructor> Instructors
		{
			get
			{
				return this.GetTable<Instructor>();
			}
		}
		
		public System.Data.Linq.Table<P_req> P_reqs
		{
			get
			{
				return this.GetTable<P_req>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
	}
	
	[Table(Name="dbo.C_completed")]
	public partial class C_completed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _sid;
		
		private string _cid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsidChanging(string value);
    partial void OnsidChanged();
    partial void OncidChanging(string value);
    partial void OncidChanged();
    #endregion
		
		public C_completed()
		{
			OnCreated();
		}
		
		[Column(Storage="_sid", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string sid
		{
			get
			{
				return this._sid;
			}
			set
			{
				if ((this._sid != value))
				{
					this.OnsidChanging(value);
					this.SendPropertyChanging();
					this._sid = value;
					this.SendPropertyChanged("sid");
					this.OnsidChanged();
				}
			}
		}
		
		[Column(Storage="_cid", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string cid
		{
			get
			{
				return this._cid;
			}
			set
			{
				if ((this._cid != value))
				{
					this.OncidChanging(value);
					this.SendPropertyChanging();
					this._cid = value;
					this.SendPropertyChanged("cid");
					this.OncidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.C_taken")]
	public partial class C_taken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _sid;
		
		private string _cid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsidChanging(string value);
    partial void OnsidChanged();
    partial void OncidChanging(string value);
    partial void OncidChanged();
    #endregion
		
		public C_taken()
		{
			OnCreated();
		}
		
		[Column(Storage="_sid", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string sid
		{
			get
			{
				return this._sid;
			}
			set
			{
				if ((this._sid != value))
				{
					this.OnsidChanging(value);
					this.SendPropertyChanging();
					this._sid = value;
					this.SendPropertyChanged("sid");
					this.OnsidChanged();
				}
			}
		}
		
		[Column(Storage="_cid", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string cid
		{
			get
			{
				return this._cid;
			}
			set
			{
				if ((this._cid != value))
				{
					this.OncidChanging(value);
					this.SendPropertyChanging();
					this._cid = value;
					this.SendPropertyChanged("cid");
					this.OncidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _cid;
		
		private string _cname;
		
		private System.Nullable<int> _crdt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncidChanging(string value);
    partial void OncidChanged();
    partial void OncnameChanging(string value);
    partial void OncnameChanged();
    partial void OncrdtChanging(System.Nullable<int> value);
    partial void OncrdtChanged();
    #endregion
		
		public Course()
		{
			OnCreated();
		}
		
		[Column(Storage="_cid", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string cid
		{
			get
			{
				return this._cid;
			}
			set
			{
				if ((this._cid != value))
				{
					this.OncidChanging(value);
					this.SendPropertyChanging();
					this._cid = value;
					this.SendPropertyChanged("cid");
					this.OncidChanged();
				}
			}
		}
		
		[Column(Storage="_cname", DbType="VarChar(20)")]
		public string cname
		{
			get
			{
				return this._cname;
			}
			set
			{
				if ((this._cname != value))
				{
					this.OncnameChanging(value);
					this.SendPropertyChanging();
					this._cname = value;
					this.SendPropertyChanged("cname");
					this.OncnameChanged();
				}
			}
		}
		
		[Column(Storage="_crdt", DbType="Int")]
		public System.Nullable<int> crdt
		{
			get
			{
				return this._crdt;
			}
			set
			{
				if ((this._crdt != value))
				{
					this.OncrdtChanging(value);
					this.SendPropertyChanging();
					this._crdt = value;
					this.SendPropertyChanged("crdt");
					this.OncrdtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Instructor")]
	public partial class Instructor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _insid;
		
		private string _ifname;
		
		private string _ilname;
		
		private System.Nullable<int> _iroom;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OninsidChanging(string value);
    partial void OninsidChanged();
    partial void OnifnameChanging(string value);
    partial void OnifnameChanged();
    partial void OnilnameChanging(string value);
    partial void OnilnameChanged();
    partial void OniroomChanging(System.Nullable<int> value);
    partial void OniroomChanged();
    #endregion
		
		public Instructor()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[Column(Storage="_insid", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string insid
		{
			get
			{
				return this._insid;
			}
			set
			{
				if ((this._insid != value))
				{
					this.OninsidChanging(value);
					this.SendPropertyChanging();
					this._insid = value;
					this.SendPropertyChanged("insid");
					this.OninsidChanged();
				}
			}
		}
		
		[Column(Storage="_ifname", DbType="VarChar(20)")]
		public string ifname
		{
			get
			{
				return this._ifname;
			}
			set
			{
				if ((this._ifname != value))
				{
					this.OnifnameChanging(value);
					this.SendPropertyChanging();
					this._ifname = value;
					this.SendPropertyChanged("ifname");
					this.OnifnameChanged();
				}
			}
		}
		
		[Column(Storage="_ilname", DbType="VarChar(20)")]
		public string ilname
		{
			get
			{
				return this._ilname;
			}
			set
			{
				if ((this._ilname != value))
				{
					this.OnilnameChanging(value);
					this.SendPropertyChanging();
					this._ilname = value;
					this.SendPropertyChanged("ilname");
					this.OnilnameChanged();
				}
			}
		}
		
		[Column(Storage="_iroom", DbType="Int")]
		public System.Nullable<int> iroom
		{
			get
			{
				return this._iroom;
			}
			set
			{
				if ((this._iroom != value))
				{
					this.OniroomChanging(value);
					this.SendPropertyChanging();
					this._iroom = value;
					this.SendPropertyChanged("iroom");
					this.OniroomChanged();
				}
			}
		}
		
		[Association(Name="Instructor_Student", Storage="_Students", ThisKey="insid", OtherKey="insid")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Instructor = null;
		}
	}
	
	[Table(Name="dbo.P_req")]
	public partial class P_req : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _cid;
		
		private string _pid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncidChanging(string value);
    partial void OncidChanged();
    partial void OnpidChanging(string value);
    partial void OnpidChanged();
    #endregion
		
		public P_req()
		{
			OnCreated();
		}
		
		[Column(Storage="_cid", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string cid
		{
			get
			{
				return this._cid;
			}
			set
			{
				if ((this._cid != value))
				{
					this.OncidChanging(value);
					this.SendPropertyChanging();
					this._cid = value;
					this.SendPropertyChanged("cid");
					this.OncidChanged();
				}
			}
		}
		
		[Column(Storage="_pid", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pid
		{
			get
			{
				return this._pid;
			}
			set
			{
				if ((this._pid != value))
				{
					this.OnpidChanging(value);
					this.SendPropertyChanging();
					this._pid = value;
					this.SendPropertyChanged("pid");
					this.OnpidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _sid;
		
		private string _insid;
		
		private string _sfname;
		
		private string _slname;
		
		private System.Nullable<int> _ccomp;
		
		private System.Nullable<double> _cgpa;
		
		private EntityRef<Instructor> _Instructor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsidChanging(string value);
    partial void OnsidChanged();
    partial void OninsidChanging(string value);
    partial void OninsidChanged();
    partial void OnsfnameChanging(string value);
    partial void OnsfnameChanged();
    partial void OnslnameChanging(string value);
    partial void OnslnameChanged();
    partial void OnccompChanging(System.Nullable<int> value);
    partial void OnccompChanged();
    partial void OncgpaChanging(System.Nullable<double> value);
    partial void OncgpaChanged();
    #endregion
		
		public Student()
		{
			this._Instructor = default(EntityRef<Instructor>);
			OnCreated();
		}
		
		[Column(Storage="_sid", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string sid
		{
			get
			{
				return this._sid;
			}
			set
			{
				if ((this._sid != value))
				{
					this.OnsidChanging(value);
					this.SendPropertyChanging();
					this._sid = value;
					this.SendPropertyChanged("sid");
					this.OnsidChanged();
				}
			}
		}
		
		[Column(Storage="_insid", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string insid
		{
			get
			{
				return this._insid;
			}
			set
			{
				if ((this._insid != value))
				{
					if (this._Instructor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OninsidChanging(value);
					this.SendPropertyChanging();
					this._insid = value;
					this.SendPropertyChanged("insid");
					this.OninsidChanged();
				}
			}
		}
		
		[Column(Storage="_sfname", DbType="VarChar(20)")]
		public string sfname
		{
			get
			{
				return this._sfname;
			}
			set
			{
				if ((this._sfname != value))
				{
					this.OnsfnameChanging(value);
					this.SendPropertyChanging();
					this._sfname = value;
					this.SendPropertyChanged("sfname");
					this.OnsfnameChanged();
				}
			}
		}
		
		[Column(Storage="_slname", DbType="VarChar(20)")]
		public string slname
		{
			get
			{
				return this._slname;
			}
			set
			{
				if ((this._slname != value))
				{
					this.OnslnameChanging(value);
					this.SendPropertyChanging();
					this._slname = value;
					this.SendPropertyChanged("slname");
					this.OnslnameChanged();
				}
			}
		}
		
		[Column(Storage="_ccomp", DbType="Int")]
		public System.Nullable<int> ccomp
		{
			get
			{
				return this._ccomp;
			}
			set
			{
				if ((this._ccomp != value))
				{
					this.OnccompChanging(value);
					this.SendPropertyChanging();
					this._ccomp = value;
					this.SendPropertyChanged("ccomp");
					this.OnccompChanged();
				}
			}
		}
		
		[Column(Storage="_cgpa", DbType="Float")]
		public System.Nullable<double> cgpa
		{
			get
			{
				return this._cgpa;
			}
			set
			{
				if ((this._cgpa != value))
				{
					this.OncgpaChanging(value);
					this.SendPropertyChanging();
					this._cgpa = value;
					this.SendPropertyChanged("cgpa");
					this.OncgpaChanged();
				}
			}
		}
		
		[Association(Name="Instructor_Student", Storage="_Instructor", ThisKey="insid", OtherKey="insid", IsForeignKey=true)]
		public Instructor Instructor
		{
			get
			{
				return this._Instructor.Entity;
			}
			set
			{
				Instructor previousValue = this._Instructor.Entity;
				if (((previousValue != value) 
							|| (this._Instructor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instructor.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Instructor.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._insid = value.insid;
					}
					else
					{
						this._insid = default(string);
					}
					this.SendPropertyChanged("Instructor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
